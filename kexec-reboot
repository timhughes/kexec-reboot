#!/bin/bash

# MIT License
#
# Copyright (c) 2022 Tim Hughes <thughes@thegoldfish.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

kernel_flag=
kernel_version=
reuse_flag=
reuse=
dry_run_flag=

print_usage(){
    printf "Usage: %s: [-k kernel_version] [-c \"command line args\"] [-d]\n" $0
    echo
    printf "  %-20s # %s\n" "-k <string>" "kernel version in the format given by \`uname -r\`"
    printf "  %-20s # %s\n" "-c <string>" "kernel arguments. If not provided then will default to the current running kernel's args"
    printf "  %-20s # %s\n" "-d" "dry-run, just print out what would happen"
    echo
}


while getopts "k:c:dh" name
do
    case $name in
    k)  kernel_flag=1
        kernel_version="$OPTARG";;
    c)  cmdline_flag=1
        cmdline_value="$OPTARG";;
    d)  dry_run_flag=1;;
    h)  print_usage
         exit 0;;
    ?)  print_usage
         exit 2;;
    esac
done

if [ -z "${kernel_flag}" ]; then
    kernel_version=$(uname -r)
fi
if [ ! -f "/boot/vmlinuz-${kernel_version}" ]; then
    echo "Kernel ${kernel_version} does not exist on system"
    print_usage
    exit 1
fi	

if [ ! -z "${cmdline_flag}" ]; then
    args="--append=\"${cmdline_value}\""
else
    args="--reuse-cmdline"
fi

command="kexec -l /boot/vmlinuz-${kernel_version} --initrd=/boot/initramfs-${kernel_version}.img ${args}"

if [ ! -z "$dry_run_flag" ]; then
    echo Dry run:
    echo $command
    echo "reboot"
    exit 0
fi

echo $command
$command
echo reboot
reboot
